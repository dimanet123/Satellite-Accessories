import socket # Модуль сетевого программирования
import time #Модуль для задержки по времени
import struct # Модуль работы с байтовым представлением
import numpy as np

print("Start TEST!") # Тестовое сообщение о старте программы
# Конфигурация сервера UDP
UDP_IP = "127.0.0.1" #IP Адрес сетевого подключения
UDP_PORT = 6501 # Порт сетевого подключения

print("UDP_START!!!") # Тестовое сообщение о старте канала связи UDP
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # Создаём сокет
# Реализация алгоритма управления 3D-моделью
# Тестовый пример - смещение в цикле по шагам
DAT=[1] #Датаграмма из 4х чисел с плавающей точкой
MAXSTEPS=200 #Максимальное число шагов
#Цикл по шагам
for i in range(MAXSTEPS+1):
    print("STEP=:", i) # Печатаем номер шага
    # готовим данные для пересылки
    koef = 0.1
    DAT[0]=np.cos(koef*i)*4
    print("DAT=",DAT)# Печатаем датаграмму

 # Пакуем данные val в байты функцией struct.pack('<d', val)
 # '<d' - это метод упаковки: порядок little-endian - от младшего байта кстаршему
 # тип данных - числа с плавающей точкой double диной 8 байт или массивтаких чисел
 # Подробнее упаковку структур см. https://tirinox.ru/python-struct/

 #Вариант с кодированием параметров из списка
    buf = bytes() #создаем переменную - буфер
 # Заполняем буфер
    for val in DAT:
        buf += struct.pack('<d', val)

    sock.sendto(buf, (UDP_IP, UDP_PORT)) # Отправляем данные серверу
    time.sleep(0.1)#Задержка по времени в сек. для удобства отображения